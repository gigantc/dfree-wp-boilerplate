

// VARIABLES -----------------------

$em-base: 16px !default;

// COLORS -----------------------
$black: #333333;
$white: #ffffff;


// FONTS -----------------------
$prox-reg: 'ProximaNova-Regular', sans-serif;
$prox-med: 'ProximaNova-Semibold', sans-serif;
$prox-lit: 'ProximaNova-LightIt', sans-serif;
$prox-l:'ProximaNova-Light', sans-serif;



// MIXINS -----------------------
@mixin breakpoint($size) { 
 @media screen and (max-width: $size) { @content; } 
}

@mixin transform($degree){
  -webkit-transform: rotate($degree);
  -moz-transform: rotate($degree);
  -ms-transform: rotate($degree);
  -o-transform: rotate($degree);
  transform: rotate($degree);
}




// FUNCTIONS -----------------------
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts px to em passed from 'cem'
@function convert-to-em($value, $base-value: $em-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1em;
  @if ($value == 0em) { $value: 0; } // Turn 0em into 0
  @return $value;
}

// call this to convert pixels to em - even lists of px
@function cem($values, $base-value: $em-base) {
  $max: length($values); // Get the total number of parameters passed
  
  @if $max == 1 { @return convert-to-em(nth($values, 1), $base-value); }

  $emValues: (); // This will eventually store the converted $values in a list
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-em(nth($values, $i), $base-value));
  }
  @return $emValues;
}
